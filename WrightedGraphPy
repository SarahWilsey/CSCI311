class WeightedGraph:
    def __init__(self, filename):
        self.adj_matrix = []
        self.node_names = []
        self.size = 0
       
        file = open(filename, 'r')
        lines = file.readlines()
        print(lines)
        nodes = lines[0].strip().split(',')
        print(nodes)
        self.node_names = nodes
        self.size = len(nodes)
        print(self.size)
       
        for index in range(self.size):
            row = [-1] * self.size
            #print(row)
            self.adj_matrix.append(row)
        print(self.adj_matrix)
           
        # range line[1] to end  
        for line in lines[1:]:
            parts = line.strip().split(',')
            node1 = parts[0]
            node2 = parts[1]
            print(node1)
            print(node2)
            weight = int(parts[2])
            print(weight)
            i = nodes.index(node1)
            k = nodes.index(node2)
            self.adj_matrix[i][k] = int(weight)
            self.adj_matrix[k][i] = int(weight)
           # if i ==k:
             #   self.adj_matrix[i][k] = 0

               
        for i in range(self.size):
            self.adj_matrix[i][i] = 0

    def getDistance(self, i, k):
        #if i == k:
            #return 0
        return self.adj_matrix[i][k]

    def directLink(self, i, k):
        # to handle out of index error
        if i < 0 or i>= self.size or k < 0 or k >= self.size:
            return False        
        elif self.adj_matrix[i][i] or self.adj_matrix[i][k] != -1:
            return True
        else:
            return False

    def getNodeName(self, i):
        return self.node_names[i]

    def getSize(self):
        return self.size
   
#def printMatrix(self):
 #       print("Weighted adjacency Matrix:")
   #     for row in self.adj_matrix:
      #      print(" ".join(str(cell) for cell in row))
